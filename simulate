#!/bin/bash

# Colors for text
RESET='\033[0m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
CYAN='\033[36m'

source /etc/GRAVITy/colors
source parameters.sh

#check internet connection
check_internet() {
    if ping -c 1 -W 1 8.8.8.8 &>/dev/null; then
        echo -e "Status [${LIGHT_GREEN}Online${NC}]"
    else
        echo -e "Status [${LIGHT_RED}Offline${NC}]"
        echo -e "${LIGHT_RED}It is recommended to connect to the internet while process is going on."
        echo -e "If any dependencies are missing then you may not able to download.${NC}"
    fi
}

#Check dependencies
check_dependencies() {
    command -v gmx >/dev/null 2>&1 || {
        echo -e ${LIGHT_RED} "GROMACS not found. It is necessary to install GROMACS.${NC}" >&2
        sleep 1.0
        echo "Installing GROMACS..."
        sudo apt-get install gromacs
        exit 1
    }
    command -v wget >/dev/null 2>&1 || {
        echo -e ${LIGHT_RED} "wget not found. It is necessary to install wget.${NC}" >&2
        sleep 1.0
        echo "Installing wget..."
        sudo apt-get install wget
        exit 1
    }
}

# Function to display a rotating loader with color
loader() {
    local pid=$1
    local delay=0.1
    local spin='|/-\\'
    local i=0
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) %4 ))
        echo -ne "\r${CYAN}Running Simulation... ${spin:$i:1} ${RESET}"
        sleep $delay
    done
    echo -ne "\r${GREEN}Done! Simulation complete.${RESET}           \n"
}

# Function to stop the spinner if an error occurs
stop_spinner() {
    if [ ! -z "$spinner_pid" ]; then
        kill $spinner_pid
    fi
}

# Function to display a rotating loader with custom text
show_spinner() {
    local pid=$1      # Process ID to monitor
    local message=$2  # Custom loading message
    local spin='-\|/' # Spinner characters
    local i=0

    # Loop to display the spinner until the task completes
    while kill -0 $pid 2>/dev/null; do
        i=$(((i + 1) % 4))
        printf "\r${spin:$i:1} %s..." "$message"
        sleep 0.1
    done
    printf "\r%s...        \n" "$message"
}

auto_task_spinner() {
    local pid=$1
    local task=$2
    local symbols=("|" "/" "-" "\\")
    local i=0

    # Check if the PID is valid before attempting to wait
    if ! kill -0 $pid 2>/dev/null; then
        echo "Error: Invalid PID $pid"
        return 1
    fi

    # Show the spinning loader while the process is running
    while kill -0 $pid 2>/dev/null; do
        printf "%-50s [${symbols[$((i % 4))]}]\r" "$task"
        sleep 0.1
        ((i++))
    done

    # Check the exit status of the background process
    if wait $pid; then
        # Task succeeded, mark with a green check
        printf "%-50s [${LIGHT_GREEN}✓${NC}]\n" "$task"
    else
        # Task failed, exit and print error message
        printf "%-50s [${LIGHT_RED}✗${NC}]\n" "$task"
        # echo
        # exit 1  # Exit the script if the task fails
    fi
}

#Loaders
#Download loader
download_loader() {
    show_spinner $! "Downloading $file_download_name"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Download failed. Please check your internet connection and try again.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}$file_download_name "downloaded successfully!"${NC}
        sleep 1.0
    fi
}

#pdbfix loader
pdbfix_loader() {
    show_spinner $! "Fixing PDB File"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to fix PDB file. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"PDB file fixed successfully. Restarting generating protein topology."${NC}
        sleep 3.0
    fi
}

#Box loader
box_loader() {
    show_spinner $! "Preparing Box"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to define the box. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Box prepared successfully!"${NC}
        sleep 1.0
    fi
}

#Solvate model loader
solvate_loader() {
    show_spinner $! "Solvating the system"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to solvate the system. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"System solvated successfully!"${NC}
        sleep 1.0
    fi
}

#ion tpr loader
ion_tpr_loader() {
    show_spinner $! "Adding ions to the system"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to generate ions.tpr. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Ions.tpr generated successfully"${NC}
        sleep 1.0
    fi
}

#Ion addition loader
ion_add_loader() {
    show_spinner $! "Adding ions to the system"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed to add ions. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Ions added successfully"${NC}
        sleep 1.0
    fi
}

# #Energy minimization preparation
# preparing_energy_min_loader(){
#     show_spinner $! "Preparing"
#     wait $!
#     if [ $? -ne 0 ]; then
#         echo -e "${LIGHT_RED}Error: Preparation step failed. See log file for more info.${NC}"
#         exit 1
#     else
#     echo -e ${LIGHT_GREEN}"Preparation successful!"${NC}
#     sleep 1.0
#     fi
# }

#Energy minimization loader
energy_minimization_loader() {
    show_spinner $! "Running energy minimization"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: Failed minimize energy. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"Energy minimized successfully"${NC}
        sleep 1.0
    fi
}

#Equilibration preparation loader
equilibration_preparation_loader() {
    show_spinner $! "Preparing for $equilibration_step_name"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: $equilibration_step_name preparation failed. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"$equilibration_step_name preparation successful"${NC}
        sleep 1.0
    fi
}

#Equilibration loader
equilibration_loader() {
    show_spinner $! "Running $equilibration_step_name"
    wait $!
    if [ $? -ne 0 ]; then
        echo -e "${LIGHT_RED}Error: $equilibration_step_name failed. See log file for more info.${NC}"
        exit 1
    else
        echo -e ${LIGHT_GREEN}"$equilibration_step_name done successfully"${NC}
        sleep 1.0
    fi
}

#check internet connection
check_internet() {
    if ping -c 1 -W 1 8.8.8.8 &>/dev/null; then
        echo -e "Status [${LIGHT_GREEN}Online${NC}]"
    else
        echo -e "Status [${LIGHT_RED}Offline${NC}]"
        echo -e "${LIGHT_RED}It is recommended to connect to the internet while process is going on."
        echo -e "If any dependencies are missing then you may not able to download.${NC}"
    fi
}

# Check if pdbid variable is set and not empty
check_pdbid() {
    if [[ -z "$pdb_id" ]]; then
        echo -e "${LIGHT_RED}No PDB ID provided.${NC}"
        return 1 # PDB ID is not set
    else
        echo -e "PDB ID: ${LIGHT_GREEN}$pdb_id${NC}"
        return 0 # PDB ID is set
    fi
}

banner() {
    # Main script loop
    clear
    echo
    # Print the colored ASCII art
    echo -e "${LIGHT_RED}  __________________    _________   ____.______________      ${RESET}"
    echo -e "${LIGHT_RED} /  _____/\\______   \\  /  _  \\   \\ /   /|   \\__    ___/${RESET}__.__. "
    echo -e "${LIGHT_RED}/   \\  ___ |       _/ /  /_\\  \\   Y   / |   | |    | ${RESET}<   |  | "
    echo -e "${LIGHT_RED}\\    \\_\\  \\|    |   \\/    |    \\     /  |   | |    |  ${RESET}\\___  | "
    echo -e "${LIGHT_RED} \\______  /|____|_  /\\____|__  /\\___/   |___| |____|  ${RESET}/ ____| "
    echo -e "${LIGHT_RED}        \\/        \\/         \\/                       ${RESET}\\/      "
    echo
    echo -e "${WHITE}  [${LIGHT_RED}G${NC}ROMACS ${LIGHT_RED}R${NC}apid ${LIGHT_RED}A${NC}nalysis & ${LIGHT_RED}V${NC}isualization ${LIGHT_RED}I${NC}nterface ${LIGHT_RED}T${NC}ool -y]${NC}"
    echo
}

# Start a background process to simulate the simulation task
(
    # Simulate the long-running simulation process
    sleep 15  # Simulate a 15-second process (your simulation)
) &

# Get the background process ID
sim_pid=$!

# Show the rotating loader
clear
banner
check_internet
echo
check_dependencies
echo -e "${LIGHT_CYAN}Simulation type: Protein in water${NC}"
echo
loader $sim_pid
